{"ast":null,"code":"import _toConsumableArray from\"C:/Users/NEXSOFT/Documents/.practice/sudoku-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"C:/Users/NEXSOFT/Documents/.practice/sudoku-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";/**\r\n *  This file gets the solved sudoku from 'sudoku.js' and\r\n * generates a unique sudoku position from it.\r\n *\r\n *  Initially, I tried the sudokus generated by 'sudoku.js'. But\r\n * it didnt handle the difficulty properly. An 'Easy' sudoku is\r\n * not that easy, and can be quite hard sometimes! And, filling\r\n * is uneven. Sometimes, entire rows/columns/boxes are filled!\r\n *\r\n *  The 'sudoku.js' code is untouched, except for the minimal\r\n * changes required to import it here.\r\n *\r\n *  The 'sudoku.js' javascript library by robatron is at\r\n * https://github.com/robatron/sudoku.js . All credits to\r\n * robatron for taking the hustle out of creating valid sudokus!\r\n *\r\n *  My code in this module builds on his code! This wouldn't\r\n * be possible without people like him sharing in the\r\n * open source community!\r\n */import{getSudoku}from'./sudoku';/**\r\n * The Sudoku position is 9x9.\r\n *    A1 A2 A3 A4 A5 A6 A7 A8 A9\r\n *    B1 B2 B3 B4 B5 B6 B7 B8 B9\r\n *    C1 C2 C3 C4 C5 C6 C7 C8 C9\r\n *    D1 D2 D3 D4 D5 D6 D7 D8 D9\r\n *    E1 E2 E3 E4 E5 E6 E7 E8 E9\r\n *    F1 F2 F3 F4 F5 F6 F7 F8 F9\r\n *    G1 G2 G3 G4 G5 G6 G7 G8 G9\r\n *    H1 H2 H3 H4 H5 H6 H7 H8 H9\r\n *    I1 I2 I3 I4 I5 I6 I7 I8 I9\r\n *\r\n * It can be considered to be comprised of 9 boxes\r\n * each, stacked in a 3x3 formation.\r\n * Like this: Box1 Box2 Box3\r\n *            Box4 Box5 Box6\r\n *            Box7 Box8 Box9\r\n *\r\n * In turn, each box is comprised of 9 cells stacked\r\n * in a 3x3 formation as above. This gives us the below\r\n * representation:\r\n *      Box1        Box2        Box3\r\n *    A1 A2 A3    A4 A5 A6    A7 A8 A9\r\n *    B1 B2 B3    B4 B5 B6    B7 B8 B9\r\n *    C1 C2 C3    C4 C5 C6    C7 C8 C9\r\n *      Box4        Box5        Box6\r\n *    D1 D2 D3    D4 D5 D6    D7 D8 D9\r\n *    E1 E2 E3    E4 E5 E6    E7 E8 E9\r\n *    F1 F2 F3    F4 F5 F6    F7 F8 F9\r\n *      Box7        Box8        Box9\r\n *    G1 G2 G3    G4 G5 G6    G7 G8 G9\r\n *    H1 H2 H3    H4 H5 H6    H7 H8 H9\r\n *    I1 I2 I3    I4 I5 I6    I7 I8 I9\r\n *\r\n * For example, Box1 has the following cells:\r\n * Box1: A1 A2 A3\r\n *       B1 B2 B3\r\n *       C1 C2 C3\r\n *\r\n * So in Box1,\r\n *    Cell1: A1   Cell2: A2   Cell3: A3\r\n *    Cell4: B1   Cell5: B2   Cell6: B3\r\n *    Cell7: C1   Cell8: C2   Cell9: C3\r\n *\r\n * and in Box8,\r\n *    Cell1: G4   Cell2: G5   Cell3: G6\r\n *    Cell4: H4   Cell5: H5   Cell6: H6\r\n *    Cell7: I4   Cell8: I5   Cell9: I6\r\n *\r\n * and so on...\r\n */ /**\r\n * Initializes a null array for easier resets in the code.\r\n */var nullArray=['0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'];/**\r\n * Gets the coordinates of the center cell of the specified box.\r\n */function _getBoxCenter(box){// eslint-disable-next-line\nswitch(box){case 0:return[1,1];case 1:return[1,4];case 2:return[1,7];case 3:return[4,1];case 4:return[4,4];case 5:return[4,7];case 6:return[7,1];case 7:return[7,4];default:return[7,7];}}/**\r\n * Gets the index of cell given:\r\n * 1. Box\r\n * 2. Cell\r\n */function _getIndexOfCell(box,cell){var _getBoxCenter2=_getBoxCenter(box),_getBoxCenter3=_slicedToArray(_getBoxCenter2,2),row=_getBoxCenter3[0],column=_getBoxCenter3[1];// eslint-disable-next-line\nswitch(cell){case 0:{row--;column--;break;}case 1:{row--;break;}case 2:{row--;column++;break;}case 3:{column--;break;}case 4:{break;}case 5:{column++;break;}case 6:{row++;column--;break;}case 7:{row++;break;}case 8:{row++;column++;break;}}return row*9+column;}/**\r\n * Checks if Cell is available or not (i.e., filled).\r\n */function _cellAvailable(tempInitArray,box,value){return tempInitArray[_getIndexOfCell(box,value)]==='0'?0:1;}/**\r\n * Generates a Unique Sudoku puzzle from a solved Sudoku.\r\n */function _generateUniqueSudoku(solvedArray,difficulty,e){var currentDifficulty=difficulty;var minimumCells,maximumCells,totalCells,box,cell;var tempInitArray=nullArray.slice();var boxCounts=[0,0,0,0,0,0,0,0,0];var boxesAvailable=[];var cellsAvailable=[];if(e)currentDifficulty=e.target.value;if(currentDifficulty==='Easy'){minimumCells=3;maximumCells=7;totalCells=45;}else if(currentDifficulty==='Medium'){minimumCells=2;maximumCells=6;totalCells=40;}else{minimumCells=1;maximumCells=5;totalCells=30;}for(var j=0;j<9;j++){boxCounts[j]=_cellAvailable(tempInitArray,j,0)+_cellAvailable(tempInitArray,j,1)+_cellAvailable(tempInitArray,j,2)+_cellAvailable(tempInitArray,j,3)+_cellAvailable(tempInitArray,j,4)+_cellAvailable(tempInitArray,j,5)+_cellAvailable(tempInitArray,j,6)+_cellAvailable(tempInitArray,j,7)+_cellAvailable(tempInitArray,j,8);}for(var i=0;i<totalCells;i++){boxesAvailable=[];for(var _j=0;_j<9;_j++){if(boxCounts[_j]<minimumCells){boxesAvailable.push(_j);}}if(boxesAvailable){for(var _j2=0;_j2<9;_j2++){if(boxCounts[_j2]<maximumCells){boxesAvailable.push(_j2);}}}box=boxesAvailable[Math.random()*boxesAvailable.length|0];cellsAvailable=[];for(var _j3=0;_j3<9;_j3++){if(tempInitArray[_getIndexOfCell(box,_j3)]==='0'){cellsAvailable.push(_j3);}}cell=cellsAvailable[Math.random()*cellsAvailable.length|0];var index=_getIndexOfCell(box,cell);tempInitArray[index]=solvedArray[index];boxCounts[box]++;}return tempInitArray;}export var getUniqueSudoku=function getUniqueSudoku(difficulty,e){var temporaryInitArray=nullArray.slice();var temporarySolvedArray=nullArray.slice();var sudoku=getSudoku();/**\r\n   * Get Sudoku from sudoku.js\r\n   */var str=sudoku.generate(60);_toConsumableArray(str).forEach(function(value,index){temporaryInitArray[index]=value==='.'?'0':value;});/**\r\n   * Get the solution from sudoku.js\r\n   */str=sudoku.solve(str);_toConsumableArray(str).forEach(function(value,index){temporarySolvedArray[index]=value;});/**\r\n   * Pass the generated solution and get a unique Sudoku from it!\r\n   */temporaryInitArray=_generateUniqueSudoku(temporarySolvedArray,difficulty,e);return[temporaryInitArray,temporarySolvedArray];};","map":{"version":3,"names":["getSudoku","nullArray","_getBoxCenter","box","_getIndexOfCell","cell","_getBoxCenter2","_getBoxCenter3","_slicedToArray","row","column","_cellAvailable","tempInitArray","value","_generateUniqueSudoku","solvedArray","difficulty","e","currentDifficulty","minimumCells","maximumCells","totalCells","slice","boxCounts","boxesAvailable","cellsAvailable","target","j","i","push","Math","random","length","index","getUniqueSudoku","temporaryInitArray","temporarySolvedArray","sudoku","str","generate","_toConsumableArray","forEach","solve"],"sources":["C:/Users/NEXSOFT/Documents/.practice/sudoku-app/src/solver/UniqueSudoku.tsx"],"sourcesContent":["/**\r\n *  This file gets the solved sudoku from 'sudoku.js' and\r\n * generates a unique sudoku position from it.\r\n *\r\n *  Initially, I tried the sudokus generated by 'sudoku.js'. But\r\n * it didnt handle the difficulty properly. An 'Easy' sudoku is\r\n * not that easy, and can be quite hard sometimes! And, filling\r\n * is uneven. Sometimes, entire rows/columns/boxes are filled!\r\n *\r\n *  The 'sudoku.js' code is untouched, except for the minimal\r\n * changes required to import it here.\r\n *\r\n *  The 'sudoku.js' javascript library by robatron is at\r\n * https://github.com/robatron/sudoku.js . All credits to\r\n * robatron for taking the hustle out of creating valid sudokus!\r\n *\r\n *  My code in this module builds on his code! This wouldn't\r\n * be possible without people like him sharing in the\r\n * open source community!\r\n */\r\nimport { getSudoku } from './sudoku';\r\n\r\n/**\r\n * The Sudoku position is 9x9.\r\n *    A1 A2 A3 A4 A5 A6 A7 A8 A9\r\n *    B1 B2 B3 B4 B5 B6 B7 B8 B9\r\n *    C1 C2 C3 C4 C5 C6 C7 C8 C9\r\n *    D1 D2 D3 D4 D5 D6 D7 D8 D9\r\n *    E1 E2 E3 E4 E5 E6 E7 E8 E9\r\n *    F1 F2 F3 F4 F5 F6 F7 F8 F9\r\n *    G1 G2 G3 G4 G5 G6 G7 G8 G9\r\n *    H1 H2 H3 H4 H5 H6 H7 H8 H9\r\n *    I1 I2 I3 I4 I5 I6 I7 I8 I9\r\n *\r\n * It can be considered to be comprised of 9 boxes\r\n * each, stacked in a 3x3 formation.\r\n * Like this: Box1 Box2 Box3\r\n *            Box4 Box5 Box6\r\n *            Box7 Box8 Box9\r\n *\r\n * In turn, each box is comprised of 9 cells stacked\r\n * in a 3x3 formation as above. This gives us the below\r\n * representation:\r\n *      Box1        Box2        Box3\r\n *    A1 A2 A3    A4 A5 A6    A7 A8 A9\r\n *    B1 B2 B3    B4 B5 B6    B7 B8 B9\r\n *    C1 C2 C3    C4 C5 C6    C7 C8 C9\r\n *      Box4        Box5        Box6\r\n *    D1 D2 D3    D4 D5 D6    D7 D8 D9\r\n *    E1 E2 E3    E4 E5 E6    E7 E8 E9\r\n *    F1 F2 F3    F4 F5 F6    F7 F8 F9\r\n *      Box7        Box8        Box9\r\n *    G1 G2 G3    G4 G5 G6    G7 G8 G9\r\n *    H1 H2 H3    H4 H5 H6    H7 H8 H9\r\n *    I1 I2 I3    I4 I5 I6    I7 I8 I9\r\n *\r\n * For example, Box1 has the following cells:\r\n * Box1: A1 A2 A3\r\n *       B1 B2 B3\r\n *       C1 C2 C3\r\n *\r\n * So in Box1,\r\n *    Cell1: A1   Cell2: A2   Cell3: A3\r\n *    Cell4: B1   Cell5: B2   Cell6: B3\r\n *    Cell7: C1   Cell8: C2   Cell9: C3\r\n *\r\n * and in Box8,\r\n *    Cell1: G4   Cell2: G5   Cell3: G6\r\n *    Cell4: H4   Cell5: H5   Cell6: H6\r\n *    Cell7: I4   Cell8: I5   Cell9: I6\r\n *\r\n * and so on...\r\n */\r\n\r\n/**\r\n * Initializes a null array for easier resets in the code.\r\n */\r\nlet nullArray = ['0', '0', '0', '0', '0', '0', '0', '0', '0',\r\n  '0', '0', '0', '0', '0', '0', '0', '0', '0',\r\n  '0', '0', '0', '0', '0', '0', '0', '0', '0',\r\n  '0', '0', '0', '0', '0', '0', '0', '0', '0',\r\n  '0', '0', '0', '0', '0', '0', '0', '0', '0',\r\n  '0', '0', '0', '0', '0', '0', '0', '0', '0',\r\n  '0', '0', '0', '0', '0', '0', '0', '0', '0',\r\n  '0', '0', '0', '0', '0', '0', '0', '0', '0',\r\n  '0', '0', '0', '0', '0', '0', '0', '0', '0'];\r\n\r\n/**\r\n * Gets the coordinates of the center cell of the specified box.\r\n */\r\nfunction _getBoxCenter(box: number) {\r\n  // eslint-disable-next-line\r\n  switch (box) {\r\n    case 0: return [1, 1];\r\n    case 1: return [1, 4];\r\n    case 2: return [1, 7];\r\n    case 3: return [4, 1];\r\n    case 4: return [4, 4];\r\n    case 5: return [4, 7];\r\n    case 6: return [7, 1];\r\n    case 7: return [7, 4];\r\n    default: return [7, 7];\r\n  }\r\n}\r\n\r\n/**\r\n * Gets the index of cell given:\r\n * 1. Box\r\n * 2. Cell\r\n */\r\nfunction _getIndexOfCell(box: number, cell: number) {\r\n  let [row, column] = _getBoxCenter(box);\r\n  // eslint-disable-next-line\r\n  switch (cell) {\r\n    case 0: { row--; column--; break; }\r\n    case 1: { row--; break; }\r\n    case 2: { row--; column++; break; }\r\n    case 3: { column--; break; }\r\n    case 4: { break; }\r\n    case 5: { column++; break; }\r\n    case 6: { row++; column--; break; }\r\n    case 7: { row++; break; }\r\n    case 8: { row++; column++; break; }\r\n  }\r\n  return row * 9 + column;\r\n}\r\n\r\n/**\r\n * Checks if Cell is available or not (i.e., filled).\r\n */\r\nfunction _cellAvailable(tempInitArray: string[], box: number, value: number) {\r\n  return tempInitArray[_getIndexOfCell(box, value)] === '0' ? 0 : 1;\r\n}\r\n\r\n/**\r\n * Generates a Unique Sudoku puzzle from a solved Sudoku.\r\n */\r\nfunction _generateUniqueSudoku(solvedArray: string[], difficulty: string, e?: React.ChangeEvent<HTMLSelectElement>) {\r\n  let currentDifficulty = difficulty;\r\n  let minimumCells, maximumCells, totalCells, box, cell;\r\n\r\n  let tempInitArray = nullArray.slice();\r\n  let boxCounts = [0, 0, 0,\r\n    0, 0, 0,\r\n    0, 0, 0];\r\n  let boxesAvailable = [];\r\n  let cellsAvailable = [];\r\n\r\n  if (e)\r\n    currentDifficulty = e.target.value;\r\n\r\n  if (currentDifficulty === 'Easy') {\r\n    minimumCells = 3;\r\n    maximumCells = 7;\r\n    totalCells = 45;\r\n  }\r\n  else if (currentDifficulty === 'Medium') {\r\n    minimumCells = 2;\r\n    maximumCells = 6;\r\n    totalCells = 40;\r\n  }\r\n  else {\r\n    minimumCells = 1;\r\n    maximumCells = 5;\r\n    totalCells = 30;\r\n  }\r\n\r\n  for (let j = 0; j < 9; j++) {\r\n    boxCounts[j] = _cellAvailable(tempInitArray, j, 0) +\r\n      _cellAvailable(tempInitArray, j, 1) +\r\n      _cellAvailable(tempInitArray, j, 2) +\r\n      _cellAvailable(tempInitArray, j, 3) +\r\n      _cellAvailable(tempInitArray, j, 4) +\r\n      _cellAvailable(tempInitArray, j, 5) +\r\n      _cellAvailable(tempInitArray, j, 6) +\r\n      _cellAvailable(tempInitArray, j, 7) +\r\n      _cellAvailable(tempInitArray, j, 8);\r\n  }\r\n\r\n  for (let i = 0; i < totalCells; i++) {\r\n    boxesAvailable = [];\r\n    for (let j = 0; j < 9; j++) {\r\n      if (boxCounts[j] < minimumCells) {\r\n        boxesAvailable.push(j);\r\n      }\r\n    }\r\n    if (boxesAvailable) {\r\n      for (let j = 0; j < 9; j++) {\r\n        if (boxCounts[j] < maximumCells) {\r\n          boxesAvailable.push(j);\r\n        }\r\n      }\r\n    }\r\n    box = boxesAvailable[Math.random() * boxesAvailable.length | 0];\r\n\r\n    cellsAvailable = [];\r\n    for (let j = 0; j < 9; j++) {\r\n      if (tempInitArray[_getIndexOfCell(box, j)] === '0') {\r\n        cellsAvailable.push(j);\r\n      }\r\n    }\r\n    cell = cellsAvailable[Math.random() * cellsAvailable.length | 0];\r\n\r\n    let index = _getIndexOfCell(box, cell);\r\n    tempInitArray[index] = solvedArray[index]\r\n    boxCounts[box]++;\r\n  }\r\n\r\n  return tempInitArray;\r\n}\r\n\r\nexport const getUniqueSudoku = (difficulty: string, e?: React.ChangeEvent<HTMLSelectElement>) => {\r\n  let temporaryInitArray = nullArray.slice();\r\n  let temporarySolvedArray = nullArray.slice();\r\n  let sudoku = getSudoku();\r\n\r\n  /**\r\n   * Get Sudoku from sudoku.js\r\n   */\r\n  let str = sudoku.generate(60);\r\n\r\n  [...str].forEach((value, index) => {\r\n    temporaryInitArray[index] = value === '.'\r\n      ? '0'\r\n      : value;\r\n  });\r\n\r\n  /**\r\n   * Get the solution from sudoku.js\r\n   */\r\n  str = sudoku.solve(str);\r\n  [...str].forEach((value, index) => {\r\n    temporarySolvedArray[index] = value;\r\n  });\r\n\r\n  /**\r\n   * Pass the generated solution and get a unique Sudoku from it!\r\n   */\r\n  temporaryInitArray = _generateUniqueSudoku(temporarySolvedArray, difficulty, e);\r\n\r\n  return [temporaryInitArray, temporarySolvedArray];\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}