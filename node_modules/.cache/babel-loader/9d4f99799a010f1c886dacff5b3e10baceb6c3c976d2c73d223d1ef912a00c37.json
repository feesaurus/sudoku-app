{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\NEXSOFT\\\\Documents\\\\.practice\\\\sudoku-app\\\\src\\\\Game.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport moment from 'moment';\nimport { Header } from './components/layout/Header';\nimport { GameSection } from './components/layout/GameSection';\nimport { StatusSection } from './components/layout/StatusSection';\nimport { Footer } from './components/layout/Footer';\nimport { getUniqueSudoku } from './solver/UniqueSudoku';\nimport { useSudokuContext } from './context/SudokuContext';\n\n/**\r\n * Game is the main React component.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Game = () => {\n  _s();\n  /**\r\n   * All the variables for holding state:\r\n   * gameArray: Holds the current state of the game.\r\n   * initArray: Holds the initial state of the game.\r\n   * solvedArray: Holds the solved position of the game.\r\n   * difficulty: Difficulty level - 'Easy', 'Medium' or 'Hard'\r\n   * numberSelected: The Number selected in the Status section.\r\n   * timeGameStarted: Time the current game was started.\r\n   * mistakesMode: Is Mistakes allowed or not?\r\n   * fastMode: Is Fast Mode enabled?\r\n   * cellSelected: If a game cell is selected by the user, holds the index.\r\n   * history: history of the current game, for 'Undo' purposes.\r\n   * overlay: Is the 'Game Solved' overlay enabled?\r\n   * won: Is the game 'won'?\r\n   */\n  let {\n    numberSelected,\n    setNumberSelected,\n    gameArray,\n    setGameArray,\n    difficulty,\n    setDifficulty,\n    setTimeGameStarted,\n    fastMode,\n    setFastMode,\n    cellSelected,\n    setCellSelected,\n    initArray,\n    setInitArray,\n    setWon\n  } = useSudokuContext();\n  let [mistakesMode, setMistakesMode] = useState(false);\n  let [history, setHistory] = useState([]);\n  let [solvedArray, setSolvedArray] = useState([]);\n  let [overlay, setOverlay] = useState(false);\n\n  /**\r\n   * Creates a new game and initializes the state variables.\r\n   */\n  function _createNewGame(e) {\n    let [temporaryInitArray, temporarySolvedArray] = getUniqueSudoku(difficulty, e);\n    setInitArray(temporaryInitArray);\n    setGameArray(temporaryInitArray);\n    setSolvedArray(temporarySolvedArray);\n    setNumberSelected('0');\n    setTimeGameStarted(moment());\n    setCellSelected(-1);\n    setHistory([]);\n    setWon(false);\n  }\n\n  /**\r\n   * Checks if the game is solved.\r\n   */\n  function _isSolved(index, value) {\n    if (gameArray.every((cell, cellIndex) => {\n      if (cellIndex === index) return value === solvedArray[cellIndex];else return cell === solvedArray[cellIndex];\n    })) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\r\n   * Fills the cell with the given 'value'\r\n   * Used to Fill / Erase as required.\r\n   */\n  function _fillCell(index, value) {\n    if (initArray[index] === '0') {\n      // Direct copy results in interesting set of problems, investigate more!\n      let tempArray = gameArray.slice();\n      let tempHistory = history.slice();\n\n      // Can't use tempArray here, due to Side effect below!!\n      tempHistory.push(gameArray.slice());\n      setHistory(tempHistory);\n      tempArray[index] = value;\n      setGameArray(tempArray);\n      if (_isSolved(index, value)) {\n        setOverlay(true);\n        setWon(true);\n      }\n    }\n  }\n\n  /**\r\n   * A 'user fill' will be passed on to the\r\n   * _fillCell function above.\r\n   */\n  function _userFillCell(index, value) {\n    if (mistakesMode) {\n      if (value === solvedArray[index]) {\n        _fillCell(index, value);\n      } else {\n        // TODO: Flash - Mistakes not allowed in Mistakes Mode\n      }\n    } else {\n      _fillCell(index, value);\n    }\n  }\n\n  /**\r\n   * On Click of 'New Game' link,\r\n   * create a new game.\r\n   */\n  function onClickNewGame() {\n    _createNewGame();\n  }\n\n  /**\r\n   * On Click of a Game cell.\r\n   */\n  function onClickCell(indexOfArray) {\n    if (fastMode && numberSelected !== '0') {\n      _userFillCell(indexOfArray, numberSelected);\n    }\n    setCellSelected(indexOfArray);\n  }\n\n  /**\r\n   * On Change Difficulty,\r\n   * 1. Update 'Difficulty' level\r\n   * 2. Create New Game\r\n   */\n  function onChangeDifficulty(e) {\n    setDifficulty(e.target.value);\n    _createNewGame(e);\n  }\n\n  /**\r\n   * On Click of Number in Status section,\r\n   * either fill cell or set the number.\r\n   */\n  function onClickNumber(number) {\n    if (fastMode) {\n      setNumberSelected(number);\n    } else if (cellSelected !== -1) {\n      _userFillCell(cellSelected, number);\n    }\n  }\n\n  /**\r\n   * On Click Undo,\r\n   * try to Undo the latest change.\r\n   */\n  function onClickUndo() {\n    if (history.length) {\n      let tempHistory = history.slice();\n      let tempArray = tempHistory.pop();\n      setHistory(tempHistory);\n      if (tempArray !== undefined) setGameArray(tempArray);\n    }\n  }\n\n  /**\r\n   * On Click Erase,\r\n   * try to delete the cell.\r\n   */\n  function onClickErase() {\n    if (cellSelected !== -1 && gameArray[cellSelected] !== '0') {\n      _fillCell(cellSelected, '0');\n    }\n  }\n\n  /**\r\n   * On Click Hint,\r\n   * fill the selected cell if its empty or wrong number is filled.\r\n   */\n  function onClickHint() {\n    if (cellSelected !== -1) {\n      _fillCell(cellSelected, solvedArray[cellSelected]);\n    }\n  }\n\n  /**\r\n   * Toggle Mistakes Mode\r\n   */\n  function onClickMistakesMode() {\n    setMistakesMode(!mistakesMode);\n  }\n\n  /**\r\n   * Toggle Fast Mode\r\n   */\n  function onClickFastMode() {\n    if (fastMode) {\n      setNumberSelected('0');\n    }\n    setCellSelected(-1);\n    setFastMode(!fastMode);\n  }\n\n  /**\r\n   * Close the overlay on Click.\r\n   */\n  function onClickOverlay() {\n    setOverlay(false);\n    _createNewGame();\n  }\n\n  /**\r\n   * On load, create a New Game.\r\n   */\n  useEffect(() => {\n    _createNewGame();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: overlay ? \"container blur\" : \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        onClick: onClickNewGame\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"innercontainer\",\n        children: [/*#__PURE__*/_jsxDEV(GameSection, {\n          onClick: indexOfArray => onClickCell(indexOfArray)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(StatusSection, {\n          onClickNumber: number => onClickNumber(number),\n          onChange: e => onChangeDifficulty(e),\n          onClickUndo: onClickUndo,\n          onClickErase: onClickErase,\n          onClickHint: onClickHint,\n          onClickMistakesMode: onClickMistakesMode,\n          onClickFastMode: onClickFastMode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: overlay ? \"overlay overlay--visible\" : \"overlay\",\n      onClick: onClickOverlay,\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"overlay__text\",\n        children: [\"You \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"overlay__textspan1\",\n          children: \"solved\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 15\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"overlay__textspan2\",\n          children: \"it!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 66\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Game, \"iSnjvu0XZGbXn5NQzEr8w3yGA4g=\", false, function () {\n  return [useSudokuContext];\n});\n_c = Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","moment","Header","GameSection","StatusSection","Footer","getUniqueSudoku","useSudokuContext","jsxDEV","_jsxDEV","Fragment","_Fragment","Game","_s","numberSelected","setNumberSelected","gameArray","setGameArray","difficulty","setDifficulty","setTimeGameStarted","fastMode","setFastMode","cellSelected","setCellSelected","initArray","setInitArray","setWon","mistakesMode","setMistakesMode","history","setHistory","solvedArray","setSolvedArray","overlay","setOverlay","_createNewGame","e","temporaryInitArray","temporarySolvedArray","_isSolved","index","value","every","cell","cellIndex","_fillCell","tempArray","slice","tempHistory","push","_userFillCell","onClickNewGame","onClickCell","indexOfArray","onChangeDifficulty","target","onClickNumber","number","onClickUndo","length","pop","undefined","onClickErase","onClickHint","onClickMistakesMode","onClickFastMode","onClickOverlay","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onChange","_c","$RefreshReg$"],"sources":["C:/Users/NEXSOFT/Documents/.practice/sudoku-app/src/Game.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport moment from 'moment';\r\nimport { Header } from './components/layout/Header';\r\nimport { GameSection } from './components/layout/GameSection';\r\nimport { StatusSection } from './components/layout/StatusSection';\r\nimport { Footer } from './components/layout/Footer';\r\nimport { getUniqueSudoku } from './solver/UniqueSudoku';\r\nimport { useSudokuContext } from './context/SudokuContext';\r\n\r\n/**\r\n * Game is the main React component.\r\n */\r\nexport const Game: React.FC<{}> = () => {\r\n  /**\r\n   * All the variables for holding state:\r\n   * gameArray: Holds the current state of the game.\r\n   * initArray: Holds the initial state of the game.\r\n   * solvedArray: Holds the solved position of the game.\r\n   * difficulty: Difficulty level - 'Easy', 'Medium' or 'Hard'\r\n   * numberSelected: The Number selected in the Status section.\r\n   * timeGameStarted: Time the current game was started.\r\n   * mistakesMode: Is Mistakes allowed or not?\r\n   * fastMode: Is Fast Mode enabled?\r\n   * cellSelected: If a game cell is selected by the user, holds the index.\r\n   * history: history of the current game, for 'Undo' purposes.\r\n   * overlay: Is the 'Game Solved' overlay enabled?\r\n   * won: Is the game 'won'?\r\n   */\r\n  let { numberSelected, setNumberSelected,\r\n    gameArray, setGameArray,\r\n    difficulty, setDifficulty,\r\n    setTimeGameStarted,\r\n    fastMode, setFastMode,\r\n    cellSelected, setCellSelected,\r\n    initArray, setInitArray,\r\n    setWon } = useSudokuContext();\r\n  let [mistakesMode, setMistakesMode] = useState<boolean>(false);\r\n  let [history, setHistory] = useState<string[][]>([]);\r\n  let [solvedArray, setSolvedArray] = useState<string[]>([]);\r\n  let [overlay, setOverlay] = useState<boolean>(false);\r\n\r\n  /**\r\n   * Creates a new game and initializes the state variables.\r\n   */\r\n  function _createNewGame(e?: React.ChangeEvent<HTMLSelectElement>) {\r\n    let [temporaryInitArray, temporarySolvedArray] = getUniqueSudoku(difficulty, e);\r\n\r\n    setInitArray(temporaryInitArray);\r\n    setGameArray(temporaryInitArray);\r\n    setSolvedArray(temporarySolvedArray);\r\n    setNumberSelected('0');\r\n    setTimeGameStarted(moment());\r\n    setCellSelected(-1);\r\n    setHistory([]);\r\n    setWon(false);\r\n  }\r\n\r\n  /**\r\n   * Checks if the game is solved.\r\n   */\r\n  function _isSolved(index: number, value: string) {\r\n    if (gameArray.every((cell: string, cellIndex: number) => {\r\n      if (cellIndex === index)\r\n        return value === solvedArray[cellIndex];\r\n      else\r\n        return cell === solvedArray[cellIndex];\r\n    })) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Fills the cell with the given 'value'\r\n   * Used to Fill / Erase as required.\r\n   */\r\n  function _fillCell(index: number, value: string) {\r\n    if (initArray[index] === '0') {\r\n      // Direct copy results in interesting set of problems, investigate more!\r\n      let tempArray = gameArray.slice();\r\n      let tempHistory = history.slice();\r\n\r\n      // Can't use tempArray here, due to Side effect below!!\r\n      tempHistory.push(gameArray.slice());\r\n      setHistory(tempHistory);\r\n\r\n      tempArray[index] = value;\r\n      setGameArray(tempArray);\r\n\r\n      if (_isSolved(index, value)) {\r\n        setOverlay(true);\r\n        setWon(true);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A 'user fill' will be passed on to the\r\n   * _fillCell function above.\r\n   */\r\n  function _userFillCell(index: number, value: string) {\r\n    if (mistakesMode) {\r\n      if (value === solvedArray[index]) {\r\n        _fillCell(index, value);\r\n      }\r\n      else {\r\n        // TODO: Flash - Mistakes not allowed in Mistakes Mode\r\n      }\r\n    } else {\r\n      _fillCell(index, value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * On Click of 'New Game' link,\r\n   * create a new game.\r\n   */\r\n  function onClickNewGame() {\r\n    _createNewGame();\r\n  }\r\n\r\n  /**\r\n   * On Click of a Game cell.\r\n   */\r\n  function onClickCell(indexOfArray: number) {\r\n    if (fastMode && numberSelected !== '0') {\r\n      _userFillCell(indexOfArray, numberSelected);\r\n    }\r\n    setCellSelected(indexOfArray);\r\n  }\r\n\r\n  /**\r\n   * On Change Difficulty,\r\n   * 1. Update 'Difficulty' level\r\n   * 2. Create New Game\r\n   */\r\n  function onChangeDifficulty(e: React.ChangeEvent<HTMLSelectElement>) {\r\n    setDifficulty(e.target.value);\r\n    _createNewGame(e);\r\n  }\r\n\r\n  /**\r\n   * On Click of Number in Status section,\r\n   * either fill cell or set the number.\r\n   */\r\n  function onClickNumber(number: string) {\r\n    if (fastMode) {\r\n      setNumberSelected(number)\r\n    } else if (cellSelected !== -1) {\r\n      _userFillCell(cellSelected, number);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * On Click Undo,\r\n   * try to Undo the latest change.\r\n   */\r\n  function onClickUndo() {\r\n    if (history.length) {\r\n      let tempHistory = history.slice();\r\n      let tempArray = tempHistory.pop();\r\n      setHistory(tempHistory);\r\n      if (tempArray !== undefined)\r\n        setGameArray(tempArray);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * On Click Erase,\r\n   * try to delete the cell.\r\n   */\r\n  function onClickErase() {\r\n    if (cellSelected !== -1 && gameArray[cellSelected] !== '0') {\r\n      _fillCell(cellSelected, '0');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * On Click Hint,\r\n   * fill the selected cell if its empty or wrong number is filled.\r\n   */\r\n  function onClickHint() {\r\n    if (cellSelected !== -1) {\r\n      _fillCell(cellSelected, solvedArray[cellSelected]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggle Mistakes Mode\r\n   */\r\n  function onClickMistakesMode() {\r\n    setMistakesMode(!mistakesMode);\r\n  }\r\n\r\n  /**\r\n   * Toggle Fast Mode\r\n   */\r\n  function onClickFastMode() {\r\n    if (fastMode) {\r\n      setNumberSelected('0');\r\n    }\r\n    setCellSelected(-1);\r\n    setFastMode(!fastMode);\r\n  }\r\n\r\n  /**\r\n   * Close the overlay on Click.\r\n   */\r\n  function onClickOverlay() {\r\n    setOverlay(false);\r\n    _createNewGame();\r\n  }\r\n\r\n  /**\r\n   * On load, create a New Game.\r\n   */\r\n  useEffect(() => {\r\n    _createNewGame();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className={overlay ? \"container blur\" : \"container\"}>\r\n        <Header onClick={onClickNewGame} />\r\n        <div className=\"innercontainer\">\r\n          <GameSection\r\n            onClick={(indexOfArray: number) => onClickCell(indexOfArray)}\r\n          />\r\n          <StatusSection\r\n            onClickNumber={(number: string) => onClickNumber(number)}\r\n            onChange={(e: React.ChangeEvent<HTMLSelectElement>) => onChangeDifficulty(e)}\r\n            onClickUndo={onClickUndo}\r\n            onClickErase={onClickErase}\r\n            onClickHint={onClickHint}\r\n            onClickMistakesMode={onClickMistakesMode}\r\n            onClickFastMode={onClickFastMode}\r\n          />\r\n        </div>\r\n        <Footer />\r\n      </div>\r\n      <div className={overlay\r\n        ? \"overlay overlay--visible\"\r\n        : \"overlay\"\r\n      }\r\n        onClick={onClickOverlay}\r\n      >\r\n        <h2 className=\"overlay__text\">\r\n          You <span className=\"overlay__textspan1\">solved</span> <span className=\"overlay__textspan2\">it!</span>\r\n        </h2>\r\n      </div>\r\n    </>\r\n  );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}