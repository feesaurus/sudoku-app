{"ast":null,"code":"/**\r\n *  This file gets the solved sudoku from 'sudoku.js' and\r\n * generates a unique sudoku position from it.\r\n *\r\n *  Initially, I tried the sudokus generated by 'sudoku.js'. But\r\n * it didnt handle the difficulty properly. An 'Easy' sudoku is\r\n * not that easy, and can be quite hard sometimes! And, filling\r\n * is uneven. Sometimes, entire rows/columns/boxes are filled!\r\n *\r\n *  The 'sudoku.js' code is untouched, except for the minimal\r\n * changes required to import it here.\r\n *\r\n *  The 'sudoku.js' javascript library by robatron is at\r\n * https://github.com/robatron/sudoku.js . All credits to\r\n * robatron for taking the hustle out of creating valid sudokus!\r\n *\r\n *  My code in this module builds on his code! This wouldn't\r\n * be possible without people like him sharing in the\r\n * open source community!\r\n */\nimport { getSudoku } from './sudoku';\n\n/**\r\n * The Sudoku position is 9x9.\r\n *    A1 A2 A3 A4 A5 A6 A7 A8 A9\r\n *    B1 B2 B3 B4 B5 B6 B7 B8 B9\r\n *    C1 C2 C3 C4 C5 C6 C7 C8 C9\r\n *    D1 D2 D3 D4 D5 D6 D7 D8 D9\r\n *    E1 E2 E3 E4 E5 E6 E7 E8 E9\r\n *    F1 F2 F3 F4 F5 F6 F7 F8 F9\r\n *    G1 G2 G3 G4 G5 G6 G7 G8 G9\r\n *    H1 H2 H3 H4 H5 H6 H7 H8 H9\r\n *    I1 I2 I3 I4 I5 I6 I7 I8 I9\r\n *\r\n * It can be considered to be comprised of 9 boxes\r\n * each, stacked in a 3x3 formation.\r\n * Like this: Box1 Box2 Box3\r\n *            Box4 Box5 Box6\r\n *            Box7 Box8 Box9\r\n *\r\n * In turn, each box is comprised of 9 cells stacked\r\n * in a 3x3 formation as above. This gives us the below\r\n * representation:\r\n *      Box1        Box2        Box3\r\n *    A1 A2 A3    A4 A5 A6    A7 A8 A9\r\n *    B1 B2 B3    B4 B5 B6    B7 B8 B9\r\n *    C1 C2 C3    C4 C5 C6    C7 C8 C9\r\n *      Box4        Box5        Box6\r\n *    D1 D2 D3    D4 D5 D6    D7 D8 D9\r\n *    E1 E2 E3    E4 E5 E6    E7 E8 E9\r\n *    F1 F2 F3    F4 F5 F6    F7 F8 F9\r\n *      Box7        Box8        Box9\r\n *    G1 G2 G3    G4 G5 G6    G7 G8 G9\r\n *    H1 H2 H3    H4 H5 H6    H7 H8 H9\r\n *    I1 I2 I3    I4 I5 I6    I7 I8 I9\r\n *\r\n * For example, Box1 has the following cells:\r\n * Box1: A1 A2 A3\r\n *       B1 B2 B3\r\n *       C1 C2 C3\r\n *\r\n * So in Box1,\r\n *    Cell1: A1   Cell2: A2   Cell3: A3\r\n *    Cell4: B1   Cell5: B2   Cell6: B3\r\n *    Cell7: C1   Cell8: C2   Cell9: C3\r\n *\r\n * and in Box8,\r\n *    Cell1: G4   Cell2: G5   Cell3: G6\r\n *    Cell4: H4   Cell5: H5   Cell6: H6\r\n *    Cell7: I4   Cell8: I5   Cell9: I6\r\n *\r\n * and so on...\r\n */\n\n/**\r\n * Initializes a null array for easier resets in the code.\r\n */\nlet nullArray = ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'];\n\n/**\r\n * Gets the coordinates of the center cell of the specified box.\r\n */\nfunction _getBoxCenter(box) {\n  // eslint-disable-next-line\n  switch (box) {\n    case 0:\n      return [1, 1];\n    case 1:\n      return [1, 4];\n    case 2:\n      return [1, 7];\n    case 3:\n      return [4, 1];\n    case 4:\n      return [4, 4];\n    case 5:\n      return [4, 7];\n    case 6:\n      return [7, 1];\n    case 7:\n      return [7, 4];\n    default:\n      return [7, 7];\n  }\n}\n\n/**\r\n * Gets the index of cell given:\r\n * 1. Box\r\n * 2. Cell\r\n */\nfunction _getIndexOfCell(box, cell) {\n  let [row, column] = _getBoxCenter(box);\n  // eslint-disable-next-line\n  switch (cell) {\n    case 0:\n      {\n        row--;\n        column--;\n        break;\n      }\n    case 1:\n      {\n        row--;\n        break;\n      }\n    case 2:\n      {\n        row--;\n        column++;\n        break;\n      }\n    case 3:\n      {\n        column--;\n        break;\n      }\n    case 4:\n      {\n        break;\n      }\n    case 5:\n      {\n        column++;\n        break;\n      }\n    case 6:\n      {\n        row++;\n        column--;\n        break;\n      }\n    case 7:\n      {\n        row++;\n        break;\n      }\n    case 8:\n      {\n        row++;\n        column++;\n        break;\n      }\n  }\n  return row * 9 + column;\n}\n\n/**\r\n * Checks if Cell is available or not (i.e., filled).\r\n */\nfunction _cellAvailable(tempInitArray, box, value) {\n  return tempInitArray[_getIndexOfCell(box, value)] === '0' ? 0 : 1;\n}\n\n/**\r\n * Generates a Unique Sudoku puzzle from a solved Sudoku.\r\n */\nfunction _generateUniqueSudoku(solvedArray, difficulty, e) {\n  let currentDifficulty = difficulty;\n  let minimumCells, maximumCells, totalCells, box, cell;\n  let tempInitArray = nullArray.slice();\n  let boxCounts = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n  let boxesAvailable = [];\n  let cellsAvailable = [];\n  if (e) currentDifficulty = e.target.value;\n  if (currentDifficulty === 'Easy') {\n    minimumCells = 3;\n    maximumCells = 7;\n    totalCells = 45;\n  } else if (currentDifficulty === 'Medium') {\n    minimumCells = 2;\n    maximumCells = 6;\n    totalCells = 40;\n  } else {\n    minimumCells = 1;\n    maximumCells = 5;\n    totalCells = 30;\n  }\n  for (let j = 0; j < 9; j++) {\n    boxCounts[j] = _cellAvailable(tempInitArray, j, 0) + _cellAvailable(tempInitArray, j, 1) + _cellAvailable(tempInitArray, j, 2) + _cellAvailable(tempInitArray, j, 3) + _cellAvailable(tempInitArray, j, 4) + _cellAvailable(tempInitArray, j, 5) + _cellAvailable(tempInitArray, j, 6) + _cellAvailable(tempInitArray, j, 7) + _cellAvailable(tempInitArray, j, 8);\n  }\n  for (let i = 0; i < totalCells; i++) {\n    boxesAvailable = [];\n    for (let j = 0; j < 9; j++) {\n      if (boxCounts[j] < minimumCells) {\n        boxesAvailable.push(j);\n      }\n    }\n    if (boxesAvailable) {\n      for (let j = 0; j < 9; j++) {\n        if (boxCounts[j] < maximumCells) {\n          boxesAvailable.push(j);\n        }\n      }\n    }\n    box = boxesAvailable[Math.random() * boxesAvailable.length | 0];\n    cellsAvailable = [];\n    for (let j = 0; j < 9; j++) {\n      if (tempInitArray[_getIndexOfCell(box, j)] === '0') {\n        cellsAvailable.push(j);\n      }\n    }\n    cell = cellsAvailable[Math.random() * cellsAvailable.length | 0];\n    let index = _getIndexOfCell(box, cell);\n    tempInitArray[index] = solvedArray[index];\n    boxCounts[box]++;\n  }\n  return tempInitArray;\n}\nexport const getUniqueSudoku = (difficulty, e) => {\n  let temporaryInitArray = nullArray.slice();\n  let temporarySolvedArray = nullArray.slice();\n  let sudoku = getSudoku();\n\n  /**\r\n   * Get Sudoku from sudoku.js\r\n   */\n  let str = sudoku.generate(60);\n  [...str].forEach((value, index) => {\n    temporaryInitArray[index] = value === '.' ? '0' : value;\n  });\n\n  /**\r\n   * Get the solution from sudoku.js\r\n   */\n  str = sudoku.solve(str);\n  [...str].forEach((value, index) => {\n    temporarySolvedArray[index] = value;\n  });\n\n  /**\r\n   * Pass the generated solution and get a unique Sudoku from it!\r\n   */\n  temporaryInitArray = _generateUniqueSudoku(temporarySolvedArray, difficulty, e);\n  return [temporaryInitArray, temporarySolvedArray];\n};","map":{"version":3,"names":["getSudoku","nullArray","_getBoxCenter","box","_getIndexOfCell","cell","row","column","_cellAvailable","tempInitArray","value","_generateUniqueSudoku","solvedArray","difficulty","e","currentDifficulty","minimumCells","maximumCells","totalCells","slice","boxCounts","boxesAvailable","cellsAvailable","target","j","i","push","Math","random","length","index","getUniqueSudoku","temporaryInitArray","temporarySolvedArray","sudoku","str","generate","forEach","solve"],"sources":["C:/Users/NEXSOFT/Documents/.practice/sudoku-app/src/solver/UniqueSudoku.tsx"],"sourcesContent":["/**\r\n *  This file gets the solved sudoku from 'sudoku.js' and\r\n * generates a unique sudoku position from it.\r\n *\r\n *  Initially, I tried the sudokus generated by 'sudoku.js'. But\r\n * it didnt handle the difficulty properly. An 'Easy' sudoku is\r\n * not that easy, and can be quite hard sometimes! And, filling\r\n * is uneven. Sometimes, entire rows/columns/boxes are filled!\r\n *\r\n *  The 'sudoku.js' code is untouched, except for the minimal\r\n * changes required to import it here.\r\n *\r\n *  The 'sudoku.js' javascript library by robatron is at\r\n * https://github.com/robatron/sudoku.js . All credits to\r\n * robatron for taking the hustle out of creating valid sudokus!\r\n *\r\n *  My code in this module builds on his code! This wouldn't\r\n * be possible without people like him sharing in the\r\n * open source community!\r\n */\r\nimport { getSudoku } from './sudoku';\r\n\r\n/**\r\n * The Sudoku position is 9x9.\r\n *    A1 A2 A3 A4 A5 A6 A7 A8 A9\r\n *    B1 B2 B3 B4 B5 B6 B7 B8 B9\r\n *    C1 C2 C3 C4 C5 C6 C7 C8 C9\r\n *    D1 D2 D3 D4 D5 D6 D7 D8 D9\r\n *    E1 E2 E3 E4 E5 E6 E7 E8 E9\r\n *    F1 F2 F3 F4 F5 F6 F7 F8 F9\r\n *    G1 G2 G3 G4 G5 G6 G7 G8 G9\r\n *    H1 H2 H3 H4 H5 H6 H7 H8 H9\r\n *    I1 I2 I3 I4 I5 I6 I7 I8 I9\r\n *\r\n * It can be considered to be comprised of 9 boxes\r\n * each, stacked in a 3x3 formation.\r\n * Like this: Box1 Box2 Box3\r\n *            Box4 Box5 Box6\r\n *            Box7 Box8 Box9\r\n *\r\n * In turn, each box is comprised of 9 cells stacked\r\n * in a 3x3 formation as above. This gives us the below\r\n * representation:\r\n *      Box1        Box2        Box3\r\n *    A1 A2 A3    A4 A5 A6    A7 A8 A9\r\n *    B1 B2 B3    B4 B5 B6    B7 B8 B9\r\n *    C1 C2 C3    C4 C5 C6    C7 C8 C9\r\n *      Box4        Box5        Box6\r\n *    D1 D2 D3    D4 D5 D6    D7 D8 D9\r\n *    E1 E2 E3    E4 E5 E6    E7 E8 E9\r\n *    F1 F2 F3    F4 F5 F6    F7 F8 F9\r\n *      Box7        Box8        Box9\r\n *    G1 G2 G3    G4 G5 G6    G7 G8 G9\r\n *    H1 H2 H3    H4 H5 H6    H7 H8 H9\r\n *    I1 I2 I3    I4 I5 I6    I7 I8 I9\r\n *\r\n * For example, Box1 has the following cells:\r\n * Box1: A1 A2 A3\r\n *       B1 B2 B3\r\n *       C1 C2 C3\r\n *\r\n * So in Box1,\r\n *    Cell1: A1   Cell2: A2   Cell3: A3\r\n *    Cell4: B1   Cell5: B2   Cell6: B3\r\n *    Cell7: C1   Cell8: C2   Cell9: C3\r\n *\r\n * and in Box8,\r\n *    Cell1: G4   Cell2: G5   Cell3: G6\r\n *    Cell4: H4   Cell5: H5   Cell6: H6\r\n *    Cell7: I4   Cell8: I5   Cell9: I6\r\n *\r\n * and so on...\r\n */\r\n\r\n/**\r\n * Initializes a null array for easier resets in the code.\r\n */\r\nlet nullArray = ['0', '0', '0', '0', '0', '0', '0', '0', '0',\r\n  '0', '0', '0', '0', '0', '0', '0', '0', '0',\r\n  '0', '0', '0', '0', '0', '0', '0', '0', '0',\r\n  '0', '0', '0', '0', '0', '0', '0', '0', '0',\r\n  '0', '0', '0', '0', '0', '0', '0', '0', '0',\r\n  '0', '0', '0', '0', '0', '0', '0', '0', '0',\r\n  '0', '0', '0', '0', '0', '0', '0', '0', '0',\r\n  '0', '0', '0', '0', '0', '0', '0', '0', '0',\r\n  '0', '0', '0', '0', '0', '0', '0', '0', '0'];\r\n\r\n/**\r\n * Gets the coordinates of the center cell of the specified box.\r\n */\r\nfunction _getBoxCenter(box: number) {\r\n  // eslint-disable-next-line\r\n  switch (box) {\r\n    case 0: return [1, 1];\r\n    case 1: return [1, 4];\r\n    case 2: return [1, 7];\r\n    case 3: return [4, 1];\r\n    case 4: return [4, 4];\r\n    case 5: return [4, 7];\r\n    case 6: return [7, 1];\r\n    case 7: return [7, 4];\r\n    default: return [7, 7];\r\n  }\r\n}\r\n\r\n/**\r\n * Gets the index of cell given:\r\n * 1. Box\r\n * 2. Cell\r\n */\r\nfunction _getIndexOfCell(box: number, cell: number) {\r\n  let [row, column] = _getBoxCenter(box);\r\n  // eslint-disable-next-line\r\n  switch (cell) {\r\n    case 0: { row--; column--; break; }\r\n    case 1: { row--; break; }\r\n    case 2: { row--; column++; break; }\r\n    case 3: { column--; break; }\r\n    case 4: { break; }\r\n    case 5: { column++; break; }\r\n    case 6: { row++; column--; break; }\r\n    case 7: { row++; break; }\r\n    case 8: { row++; column++; break; }\r\n  }\r\n  return row * 9 + column;\r\n}\r\n\r\n/**\r\n * Checks if Cell is available or not (i.e., filled).\r\n */\r\nfunction _cellAvailable(tempInitArray: string[], box: number, value: number) {\r\n  return tempInitArray[_getIndexOfCell(box, value)] === '0' ? 0 : 1;\r\n}\r\n\r\n/**\r\n * Generates a Unique Sudoku puzzle from a solved Sudoku.\r\n */\r\nfunction _generateUniqueSudoku(solvedArray: string[], difficulty: string, e?: React.ChangeEvent<HTMLSelectElement>) {\r\n  let currentDifficulty = difficulty;\r\n  let minimumCells, maximumCells, totalCells, box, cell;\r\n\r\n  let tempInitArray = nullArray.slice();\r\n  let boxCounts = [0, 0, 0,\r\n    0, 0, 0,\r\n    0, 0, 0];\r\n  let boxesAvailable = [];\r\n  let cellsAvailable = [];\r\n\r\n  if (e)\r\n    currentDifficulty = e.target.value;\r\n\r\n  if (currentDifficulty === 'Easy') {\r\n    minimumCells = 3;\r\n    maximumCells = 7;\r\n    totalCells = 45;\r\n  }\r\n  else if (currentDifficulty === 'Medium') {\r\n    minimumCells = 2;\r\n    maximumCells = 6;\r\n    totalCells = 40;\r\n  }\r\n  else {\r\n    minimumCells = 1;\r\n    maximumCells = 5;\r\n    totalCells = 30;\r\n  }\r\n\r\n  for (let j = 0; j < 9; j++) {\r\n    boxCounts[j] = _cellAvailable(tempInitArray, j, 0) +\r\n      _cellAvailable(tempInitArray, j, 1) +\r\n      _cellAvailable(tempInitArray, j, 2) +\r\n      _cellAvailable(tempInitArray, j, 3) +\r\n      _cellAvailable(tempInitArray, j, 4) +\r\n      _cellAvailable(tempInitArray, j, 5) +\r\n      _cellAvailable(tempInitArray, j, 6) +\r\n      _cellAvailable(tempInitArray, j, 7) +\r\n      _cellAvailable(tempInitArray, j, 8);\r\n  }\r\n\r\n  for (let i = 0; i < totalCells; i++) {\r\n    boxesAvailable = [];\r\n    for (let j = 0; j < 9; j++) {\r\n      if (boxCounts[j] < minimumCells) {\r\n        boxesAvailable.push(j);\r\n      }\r\n    }\r\n    if (boxesAvailable) {\r\n      for (let j = 0; j < 9; j++) {\r\n        if (boxCounts[j] < maximumCells) {\r\n          boxesAvailable.push(j);\r\n        }\r\n      }\r\n    }\r\n    box = boxesAvailable[Math.random() * boxesAvailable.length | 0];\r\n\r\n    cellsAvailable = [];\r\n    for (let j = 0; j < 9; j++) {\r\n      if (tempInitArray[_getIndexOfCell(box, j)] === '0') {\r\n        cellsAvailable.push(j);\r\n      }\r\n    }\r\n    cell = cellsAvailable[Math.random() * cellsAvailable.length | 0];\r\n\r\n    let index = _getIndexOfCell(box, cell);\r\n    tempInitArray[index] = solvedArray[index]\r\n    boxCounts[box]++;\r\n  }\r\n\r\n  return tempInitArray;\r\n}\r\n\r\nexport const getUniqueSudoku = (difficulty: string, e?: React.ChangeEvent<HTMLSelectElement>) => {\r\n  let temporaryInitArray = nullArray.slice();\r\n  let temporarySolvedArray = nullArray.slice();\r\n  let sudoku = getSudoku();\r\n\r\n  /**\r\n   * Get Sudoku from sudoku.js\r\n   */\r\n  let str = sudoku.generate(60);\r\n\r\n  [...str].forEach((value, index) => {\r\n    temporaryInitArray[index] = value === '.'\r\n      ? '0'\r\n      : value;\r\n  });\r\n\r\n  /**\r\n   * Get the solution from sudoku.js\r\n   */\r\n  str = sudoku.solve(str);\r\n  [...str].forEach((value, index) => {\r\n    temporarySolvedArray[index] = value;\r\n  });\r\n\r\n  /**\r\n   * Pass the generated solution and get a unique Sudoku from it!\r\n   */\r\n  temporaryInitArray = _generateUniqueSudoku(temporarySolvedArray, difficulty, e);\r\n\r\n  return [temporaryInitArray, temporarySolvedArray];\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}