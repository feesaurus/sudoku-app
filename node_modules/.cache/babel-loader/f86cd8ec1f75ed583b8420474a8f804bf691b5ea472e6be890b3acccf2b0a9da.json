{"ast":null,"code":"import _slicedToArray from\"C:/Users/NEXSOFT/Documents/.practice/sudoku-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useEffect}from'react';import moment from'moment';import{Header}from'./components/layout/Header';import{GameSection}from'./components/layout/GameSection';import{StatusSection}from'./components/layout/StatusSection';import{getUniqueSudoku}from'./solver/UniqueSudoku';import{useSudokuContext}from'./context/SudokuContext';/**\r\n * Game is the main React component.\r\n */import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";export var Game=function Game(){/**\r\n   * All the variables for holding state:\r\n   * gameArray: Holds the current state of the game.\r\n   * initArray: Holds the initial state of the game.\r\n   * solvedArray: Holds the solved position of the game.\r\n   * difficulty: Difficulty level - 'Easy', 'Medium' or 'Hard'\r\n   * numberSelected: The Number selected in the Status section.\r\n   * timeGameStarted: Time the current game was started.\r\n   * mistakesMode: Is Mistakes allowed or not?\r\n   * fastMode: Is Fast Mode enabled?\r\n   * cellSelected: If a game cell is selected by the user, holds the index.\r\n   * history: history of the current game, for 'Undo' purposes.\r\n   * overlay: Is the 'Game Solved' overlay enabled?\r\n   * won: Is the game 'won'?\r\n   */var _useSudokuContext=useSudokuContext(),numberSelected=_useSudokuContext.numberSelected,setNumberSelected=_useSudokuContext.setNumberSelected,gameArray=_useSudokuContext.gameArray,setGameArray=_useSudokuContext.setGameArray,difficulty=_useSudokuContext.difficulty,setDifficulty=_useSudokuContext.setDifficulty,setTimeGameStarted=_useSudokuContext.setTimeGameStarted,fastMode=_useSudokuContext.fastMode,setFastMode=_useSudokuContext.setFastMode,cellSelected=_useSudokuContext.cellSelected,setCellSelected=_useSudokuContext.setCellSelected,initArray=_useSudokuContext.initArray,setInitArray=_useSudokuContext.setInitArray,setWon=_useSudokuContext.setWon;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),mistakesMode=_useState2[0],setMistakesMode=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),history=_useState4[0],setHistory=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),solvedArray=_useState6[0],setSolvedArray=_useState6[1];var _useState7=useState(false),_useState8=_slicedToArray(_useState7,2),overlay=_useState8[0],setOverlay=_useState8[1];/**\r\n   * Creates a new game and initializes the state variables.\r\n   */function _createNewGame(e){var _getUniqueSudoku=getUniqueSudoku(difficulty,e),_getUniqueSudoku2=_slicedToArray(_getUniqueSudoku,2),temporaryInitArray=_getUniqueSudoku2[0],temporarySolvedArray=_getUniqueSudoku2[1];setInitArray(temporaryInitArray);setGameArray(temporaryInitArray);setSolvedArray(temporarySolvedArray);setNumberSelected('0');setTimeGameStarted(moment());setCellSelected(-1);setHistory([]);setWon(false);}/**\r\n   * Checks if the game is solved.\r\n   */function _isSolved(index,value){if(gameArray.every(function(cell,cellIndex){if(cellIndex===index)return value===solvedArray[cellIndex];else return cell===solvedArray[cellIndex];})){return true;}return false;}/**\r\n   * Fills the cell with the given 'value'\r\n   * Used to Fill / Erase as required.\r\n   */function _fillCell(index,value){if(initArray[index]==='0'){// Direct copy results in interesting set of problems, investigate more!\nvar tempArray=gameArray.slice();var tempHistory=history.slice();// Can't use tempArray here, due to Side effect below!!\ntempHistory.push(gameArray.slice());setHistory(tempHistory);tempArray[index]=value;setGameArray(tempArray);if(_isSolved(index,value)){setOverlay(true);setWon(true);}}}/**\r\n   * A 'user fill' will be passed on to the\r\n   * _fillCell function above.\r\n   */function _userFillCell(index,value){if(mistakesMode){if(value===solvedArray[index]){_fillCell(index,value);}else{// TODO: Flash - Mistakes not allowed in Mistakes Mode\n}}else{_fillCell(index,value);}}/**\r\n   * On Click of 'New Game' link,\r\n   * create a new game.\r\n   */function onClickNewGame(){_createNewGame();}/**\r\n   * On Click of a Game cell.\r\n   */function onClickCell(indexOfArray){if(fastMode&&numberSelected!=='0'){_userFillCell(indexOfArray,numberSelected);}setCellSelected(indexOfArray);}/**\r\n   * On Change Difficulty,\r\n   * 1. Update 'Difficulty' level\r\n   * 2. Create New Game\r\n   */function onChangeDifficulty(e){setDifficulty(e.target.value);_createNewGame(e);}/**\r\n   * On Click of Number in Status section,\r\n   * either fill cell or set the number.\r\n   */function _onClickNumber(number){if(fastMode){setNumberSelected(number);}else if(cellSelected!==-1){_userFillCell(cellSelected,number);}}/**\r\n   * On Click Undo,\r\n   * try to Undo the latest change.\r\n   */function onClickUndo(){if(history.length){var tempHistory=history.slice();var tempArray=tempHistory.pop();setHistory(tempHistory);if(tempArray!==undefined)setGameArray(tempArray);}}/**\r\n   * On Click Erase,\r\n   * try to delete the cell.\r\n   */function onClickErase(){if(cellSelected!==-1&&gameArray[cellSelected]!=='0'){_fillCell(cellSelected,'0');}}/**\r\n   * On Click Hint,\r\n   * fill the selected cell if its empty or wrong number is filled.\r\n   */function onClickHint(){if(cellSelected!==-1){_fillCell(cellSelected,solvedArray[cellSelected]);}}/**\r\n   * Toggle Mistakes Mode\r\n   */function onClickMistakesMode(){setMistakesMode(!mistakesMode);}/**\r\n   * Toggle Fast Mode\r\n   */function onClickFastMode(){if(fastMode){setNumberSelected('0');}setCellSelected(-1);setFastMode(!fastMode);}/**\r\n   * Close the overlay on Click.\r\n   */function onClickOverlay(){setOverlay(false);_createNewGame();}/**\r\n   * On load, create a New Game.\r\n   */useEffect(function(){_createNewGame();// eslint-disable-next-line react-hooks/exhaustive-deps\n},[]);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:overlay?\"container blur\":\"container\",children:[/*#__PURE__*/_jsx(Header,{onClick:onClickNewGame}),/*#__PURE__*/_jsxs(\"div\",{className:\"innercontainer\",children:[/*#__PURE__*/_jsx(GameSection,{onClick:function onClick(indexOfArray){return onClickCell(indexOfArray);}}),/*#__PURE__*/_jsx(StatusSection,{onClickNumber:function onClickNumber(number){return _onClickNumber(number);},onChange:function onChange(e){return onChangeDifficulty(e);},onClickUndo:onClickUndo,onClickErase:onClickErase,onClickHint:onClickHint,onClickMistakesMode:onClickMistakesMode,onClickFastMode:onClickFastMode})]})]}),/*#__PURE__*/_jsx(\"div\",{className:overlay?\"overlay overlay--visible\":\"overlay\",onClick:onClickOverlay,children:/*#__PURE__*/_jsxs(\"h2\",{className:\"overlay__text\",children:[\"You \",/*#__PURE__*/_jsx(\"span\",{className:\"overlay__textspan1\",children:\"solved\"}),\" \",/*#__PURE__*/_jsx(\"span\",{className:\"overlay__textspan2\",children:\"it!\"})]})})]});};","map":{"version":3,"names":["React","useState","useEffect","moment","Header","GameSection","StatusSection","getUniqueSudoku","useSudokuContext","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Game","_useSudokuContext","numberSelected","setNumberSelected","gameArray","setGameArray","difficulty","setDifficulty","setTimeGameStarted","fastMode","setFastMode","cellSelected","setCellSelected","initArray","setInitArray","setWon","_useState","_useState2","_slicedToArray","mistakesMode","setMistakesMode","_useState3","_useState4","history","setHistory","_useState5","_useState6","solvedArray","setSolvedArray","_useState7","_useState8","overlay","setOverlay","_createNewGame","e","_getUniqueSudoku","_getUniqueSudoku2","temporaryInitArray","temporarySolvedArray","_isSolved","index","value","every","cell","cellIndex","_fillCell","tempArray","slice","tempHistory","push","_userFillCell","onClickNewGame","onClickCell","indexOfArray","onChangeDifficulty","target","onClickNumber","number","onClickUndo","length","pop","undefined","onClickErase","onClickHint","onClickMistakesMode","onClickFastMode","onClickOverlay","children","className","onClick","onChange"],"sources":["C:/Users/NEXSOFT/Documents/.practice/sudoku-app/src/Game.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport moment from 'moment';\r\nimport { Header } from './components/layout/Header';\r\nimport { GameSection } from './components/layout/GameSection';\r\nimport { StatusSection } from './components/layout/StatusSection';\r\nimport { getUniqueSudoku } from './solver/UniqueSudoku';\r\nimport { useSudokuContext } from './context/SudokuContext';\r\n\r\n/**\r\n * Game is the main React component.\r\n */\r\nexport const Game: React.FC<{}> = () => {\r\n  /**\r\n   * All the variables for holding state:\r\n   * gameArray: Holds the current state of the game.\r\n   * initArray: Holds the initial state of the game.\r\n   * solvedArray: Holds the solved position of the game.\r\n   * difficulty: Difficulty level - 'Easy', 'Medium' or 'Hard'\r\n   * numberSelected: The Number selected in the Status section.\r\n   * timeGameStarted: Time the current game was started.\r\n   * mistakesMode: Is Mistakes allowed or not?\r\n   * fastMode: Is Fast Mode enabled?\r\n   * cellSelected: If a game cell is selected by the user, holds the index.\r\n   * history: history of the current game, for 'Undo' purposes.\r\n   * overlay: Is the 'Game Solved' overlay enabled?\r\n   * won: Is the game 'won'?\r\n   */\r\n  let { numberSelected, setNumberSelected,\r\n    gameArray, setGameArray,\r\n    difficulty, setDifficulty,\r\n    setTimeGameStarted,\r\n    fastMode, setFastMode,\r\n    cellSelected, setCellSelected,\r\n    initArray, setInitArray,\r\n    setWon } = useSudokuContext();\r\n  let [mistakesMode, setMistakesMode] = useState<boolean>(false);\r\n  let [history, setHistory] = useState<string[][]>([]);\r\n  let [solvedArray, setSolvedArray] = useState<string[]>([]);\r\n  let [overlay, setOverlay] = useState<boolean>(false);\r\n\r\n  /**\r\n   * Creates a new game and initializes the state variables.\r\n   */\r\n  function _createNewGame(e?: React.ChangeEvent<HTMLSelectElement>) {\r\n    let [temporaryInitArray, temporarySolvedArray] = getUniqueSudoku(difficulty, e);\r\n\r\n    setInitArray(temporaryInitArray);\r\n    setGameArray(temporaryInitArray);\r\n    setSolvedArray(temporarySolvedArray);\r\n    setNumberSelected('0');\r\n    setTimeGameStarted(moment());\r\n    setCellSelected(-1);\r\n    setHistory([]);\r\n    setWon(false);\r\n  }\r\n\r\n  /**\r\n   * Checks if the game is solved.\r\n   */\r\n  function _isSolved(index: number, value: string) {\r\n    if (gameArray.every((cell: string, cellIndex: number) => {\r\n      if (cellIndex === index)\r\n        return value === solvedArray[cellIndex];\r\n      else\r\n        return cell === solvedArray[cellIndex];\r\n    })) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Fills the cell with the given 'value'\r\n   * Used to Fill / Erase as required.\r\n   */\r\n  function _fillCell(index: number, value: string) {\r\n    if (initArray[index] === '0') {\r\n      // Direct copy results in interesting set of problems, investigate more!\r\n      let tempArray = gameArray.slice();\r\n      let tempHistory = history.slice();\r\n\r\n      // Can't use tempArray here, due to Side effect below!!\r\n      tempHistory.push(gameArray.slice());\r\n      setHistory(tempHistory);\r\n\r\n      tempArray[index] = value;\r\n      setGameArray(tempArray);\r\n\r\n      if (_isSolved(index, value)) {\r\n        setOverlay(true);\r\n        setWon(true);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A 'user fill' will be passed on to the\r\n   * _fillCell function above.\r\n   */\r\n  function _userFillCell(index: number, value: string) {\r\n    if (mistakesMode) {\r\n      if (value === solvedArray[index]) {\r\n        _fillCell(index, value);\r\n      }\r\n      else {\r\n        // TODO: Flash - Mistakes not allowed in Mistakes Mode\r\n      }\r\n    } else {\r\n      _fillCell(index, value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * On Click of 'New Game' link,\r\n   * create a new game.\r\n   */\r\n  function onClickNewGame() {\r\n    _createNewGame();\r\n  }\r\n\r\n  /**\r\n   * On Click of a Game cell.\r\n   */\r\n  function onClickCell(indexOfArray: number) {\r\n    if (fastMode && numberSelected !== '0') {\r\n      _userFillCell(indexOfArray, numberSelected);\r\n    }\r\n    setCellSelected(indexOfArray);\r\n  }\r\n\r\n  /**\r\n   * On Change Difficulty,\r\n   * 1. Update 'Difficulty' level\r\n   * 2. Create New Game\r\n   */\r\n  function onChangeDifficulty(e: React.ChangeEvent<HTMLSelectElement>) {\r\n    setDifficulty(e.target.value);\r\n    _createNewGame(e);\r\n  }\r\n\r\n  /**\r\n   * On Click of Number in Status section,\r\n   * either fill cell or set the number.\r\n   */\r\n  function onClickNumber(number: string) {\r\n    if (fastMode) {\r\n      setNumberSelected(number)\r\n    } else if (cellSelected !== -1) {\r\n      _userFillCell(cellSelected, number);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * On Click Undo,\r\n   * try to Undo the latest change.\r\n   */\r\n  function onClickUndo() {\r\n    if (history.length) {\r\n      let tempHistory = history.slice();\r\n      let tempArray = tempHistory.pop();\r\n      setHistory(tempHistory);\r\n      if (tempArray !== undefined)\r\n        setGameArray(tempArray);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * On Click Erase,\r\n   * try to delete the cell.\r\n   */\r\n  function onClickErase() {\r\n    if (cellSelected !== -1 && gameArray[cellSelected] !== '0') {\r\n      _fillCell(cellSelected, '0');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * On Click Hint,\r\n   * fill the selected cell if its empty or wrong number is filled.\r\n   */\r\n  function onClickHint() {\r\n    if (cellSelected !== -1) {\r\n      _fillCell(cellSelected, solvedArray[cellSelected]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggle Mistakes Mode\r\n   */\r\n  function onClickMistakesMode() {\r\n    setMistakesMode(!mistakesMode);\r\n  }\r\n\r\n  /**\r\n   * Toggle Fast Mode\r\n   */\r\n  function onClickFastMode() {\r\n    if (fastMode) {\r\n      setNumberSelected('0');\r\n    }\r\n    setCellSelected(-1);\r\n    setFastMode(!fastMode);\r\n  }\r\n\r\n  /**\r\n   * Close the overlay on Click.\r\n   */\r\n  function onClickOverlay() {\r\n    setOverlay(false);\r\n    _createNewGame();\r\n  }\r\n\r\n  /**\r\n   * On load, create a New Game.\r\n   */\r\n  useEffect(() => {\r\n    _createNewGame();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className={overlay ? \"container blur\" : \"container\"}>\r\n        <Header onClick={onClickNewGame} />\r\n        <div className=\"innercontainer\">\r\n          <GameSection\r\n            onClick={(indexOfArray: number) => onClickCell(indexOfArray)}\r\n          />\r\n          <StatusSection\r\n            onClickNumber={(number: string) => onClickNumber(number)}\r\n            onChange={(e: React.ChangeEvent<HTMLSelectElement>) => onChangeDifficulty(e)}\r\n            onClickUndo={onClickUndo}\r\n            onClickErase={onClickErase}\r\n            onClickHint={onClickHint}\r\n            onClickMistakesMode={onClickMistakesMode}\r\n            onClickFastMode={onClickFastMode}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className={overlay\r\n        ? \"overlay overlay--visible\"\r\n        : \"overlay\"\r\n      }\r\n        onClick={onClickOverlay}\r\n      >\r\n        <h2 className=\"overlay__text\">\r\n          You <span className=\"overlay__textspan1\">solved</span> <span className=\"overlay__textspan2\">it!</span>\r\n        </h2>\r\n      </div>\r\n    </>\r\n  );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}